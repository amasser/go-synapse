package synapse

import (
	"github.com/n0rad/go-erlog/data"
	"github.com/n0rad/go-erlog/errs"
	"github.com/n0rad/go-erlog/logs"
	"github.com/prometheus/client_golang/prometheus"
	"gopkg.in/macaron.v1"
	"log"
	"net"
	"net/http"
	"reflect"
	"strconv"
	"sync/atomic"
	"time"
	"unsafe"
)

var favicon_ico = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x93\x5b\x6c\x54\x55\x14\x86\x37\x60\x0b\xbd\x40\x47\x5a\x46\x28\x50\xa6\x88\x58\x10\x30\x21\xa8\x0f\xc6\x4b\x63\x34\x31\x46\x4d\x8c\xf1\xf2\xa0\x2f\x92\x80\x44\x34\x9a\x58\xb5\x90\x90\x3e\xd4\xc6\x40\xb4\xc1\x78\x49\x48\x34\x24\x6a\x82\x09\xd1\x84\x44\x7d\xd0\x97\xce\x99\x6b\x6b\x87\x61\x6a\x2f\x74\x86\x4e\x3b\x2d\x6d\xa1\xb6\xd3\x39\x73\xce\xf4\xca\xe7\xda\xbb\x19\xe5\xdd\x3d\xf9\x73\xf6\xac\xbd\xfe\xb5\xd6\xfe\xd7\xda\x4a\xad\x92\x9f\xc7\xa3\xbf\x3e\x75\xf4\x0e\xa5\xbc\x4a\xa9\x06\x81\x98\xc4\xb2\x62\x37\x4b\xce\x36\x56\xac\xa0\xb8\x1c\xc7\x21\x97\xcb\x33\x3f\xef\x02\x73\x5c\x1d\xcc\xf2\xc9\xe7\x23\x5c\xf8\x79\x9c\xc5\x05\x97\xb9\x39\x87\x96\xd3\x69\x0e\xbf\x9b\xc4\x1f\x9c\x82\x5b\x73\x2c\x2e\xba\x86\xa3\xb9\xb6\x9d\x37\xbc\xcc\x68\x8e\xe3\xcd\x49\xaa\xf7\x75\xa2\xbc\x41\xca\xeb\x23\x8c\x88\xad\xb7\x3f\xcb\xea\x2d\x21\xd4\xe6\x00\xa5\x3b\xc2\xbc\x7c\xa4\x9f\xfe\xab\x59\xc3\xb1\x6d\x47\xe2\x15\xf8\xe9\x97\x09\xbc\xf7\x45\x51\xa5\x1d\x94\x6e\x0f\x53\xb1\x3b\xcc\x1a\xf9\x5e\xf9\x6b\x86\xce\xee\x69\x56\x6d\x0b\xb3\xa1\x21\x22\x10\x9f\x32\x3f\x1b\x76\x86\xf9\xfe\xe2\x75\xe1\xba\x84\xa2\x7f\xb3\xae\x2e\x4c\xc9\xb6\x10\x2d\x67\xd2\xc4\xaf\x64\x69\x78\x34\x66\xf8\x43\xe9\x59\x06\x93\xb3\xa8\xda\x30\xfb\x1a\xe3\xf2\x3f\x47\xfb\xd7\x19\xca\xea\xc5\x7f\x6b\x88\x40\x64\x8a\xd3\x67\x47\x50\xe5\x16\xad\xed\xc3\x52\xd3\xbc\xc1\x43\xcf\xf4\x50\xb6\x2b\xca\xe4\xa4\xcd\xe8\x98\xcd\xda\xfa\x28\x0f\x3e\x9d\xe0\xd6\x72\xc1\x9c\xb7\x19\x4e\x80\x4f\xbf\xcc\xf0\xfe\xa9\x6b\xa8\xca\x00\x97\x7e\xbb\x21\x67\x0b\xf4\x0d\x64\xa9\x11\x0d\x2a\xef\x89\x18\xae\xce\x59\xbe\x2b\xc2\xc6\xbd\x51\x12\xbd\x59\xe3\x73\xf1\xd2\x24\xaa\xc2\xe2\xc4\xc7\x43\x1c\x3f\x91\x92\xbd\x9f\x33\x5f\x64\xe8\xe9\x9d\xe1\xfe\x27\x62\xa8\x4d\x01\x94\xc7\xe2\xb1\xe7\x13\x3c\xf2\x5c\x02\x55\x65\xa1\xaa\x2d\xf6\x37\xc6\xe8\x8a\x4d\x73\xb2\x2d\xbd\xc2\x6f\x1d\xa2\x49\xe7\xdf\x12\xa4\x7a\x7f\x27\xe5\xa2\x83\x5a\xef\xe7\xf1\x17\x7b\x78\xbb\x39\x25\x3d\x08\xb3\xb6\x2e\x44\x53\xcb\x35\x9e\x7d\xbd\x4f\xe2\xf8\x29\xdd\x1c\xa4\x6a\x8f\xe8\x58\x1b\xa2\xad\x7d\x84\x73\xe7\xc7\x24\x97\xe4\xf3\x5a\x54\x49\xcd\x67\xcf\x65\x58\x5a\xd2\xf7\x5c\xe4\xe0\x53\x71\x76\x3f\x1c\x63\x79\x69\xc1\xdc\xfb\xfc\x85\x31\xee\x92\x3c\xaa\x46\xfc\x6b\x82\xfc\xfa\xfb\x4d\xa3\xd1\x4b\x87\xfb\x79\xf5\xc8\x80\xe9\xb5\xe6\xe9\x59\x38\xf6\xc1\x20\x25\xbe\x10\xab\xeb\x82\xbc\x22\x3d\xd7\xba\xe8\xb3\x74\x26\xc7\xd1\xa6\x41\x9a\xe5\xee\xae\xeb\x52\x28\x38\x12\x7f\x45\xd7\xc9\x1b\x79\xde\x39\x99\x62\xd3\x5e\xc9\xb1\xae\x03\xcf\xbd\x9d\x78\xf6\xc8\xbe\xac\x83\xf5\x3b\x23\xbc\xf6\xd6\x00\xc9\xd4\xac\xd1\x70\x59\x7a\xe1\xba\x8e\x99\x21\x3d\x87\x13\x52\xc7\x81\xc6\xcb\xa8\x3b\x2d\xca\xee\x8e\xf0\x91\x68\xa3\x73\x6a\xb4\x7e\x36\x8c\x47\xf4\x57\x35\x16\x5e\xe9\x4d\x77\x7c\xda\xcc\xbb\xe6\xe6\xf3\x8e\xcc\xb8\xcb\xf5\x71\x9b\xda\x03\x5d\xa8\xad\x01\xb6\x1f\xea\x66\x38\x63\x9b\x3c\xba\x2e\xc7\x29\x70\xf0\xc9\x38\x6b\x7c\x41\xe9\x4d\x90\x3f\x3a\x6e\x8a\xbd\x70\xdb\x1b\x70\xcc\x6c\x04\xa2\x53\xec\x78\xe0\x4f\xd3\x03\xdf\xa1\x2e\xbe\xfa\x76\x8c\xef\x7e\x1c\x97\x9e\x5e\x36\xda\x57\x4a\x5d\xdf\xfc\x30\x6a\x66\xbe\x58\x77\x11\x26\x86\xd8\xc7\x27\x6c\x8e\x7d\x98\xa4\xc2\x17\x31\x73\xa9\x51\x22\xef\xe7\x85\x37\xfa\x48\xf4\xcc\xfc\xfb\x6e\x6e\xe7\x16\xa1\xeb\xd1\x77\xd1\x3e\x71\xf1\x7d\xef\x54\x8a\x37\x9b\x92\x58\xa1\x29\x89\xad\xdf\xed\x7f\x35\x17\xa1\xfe\xe7\xfa\x27\x00\x00\xff\xff\x0e\x0a\x75\xed\x7e\x04\x00\x00"

func (s *Synapse) startApi() error {
	var err error
	url := s.ApiHost + ":" + strconv.Itoa(s.ApiPort)
	s.apiListener, err = net.Listen("tcp", url)
	if err != nil {
		return errs.WithEF(err, s.fields.WithField("url", url), "Failed to listen")
	}

	m := macaron.New()
	m.Use(Logger())
	m.Use(macaron.Recovery())
	m.Use(macaron.Static("public"))

	m.Get("/favicon.ico", func(resp http.ResponseWriter) {
		resp.Header().Set("Content-Encoding", "gzip")
		resp.Header().Set("Content-Type", "image/x-icon")
		resp.Header().Set("Cache-Control", "public, max-age=7776000")

		var empty [0]byte
		sx := (*reflect.StringHeader)(unsafe.Pointer(&favicon_ico))
		b := empty[:]
		bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
		bx.Data = sx.Data
		bx.Len = len(favicon_ico)
		bx.Cap = bx.Len
		resp.Write(b)
	})
	m.Get("/version", func(resp http.ResponseWriter) {
		resp.Write([]byte("version: "))
		resp.Write([]byte(s.synapseVersion))
		resp.Write([]byte("\n"))
		resp.Write([]byte("buildDate: "))
		resp.Write([]byte(s.synapseBuildTime))
		resp.Write([]byte("\n"))
	})

	m.Get("/metrics", prometheus.Handler())
	m.Get("/", func() string {
		return `/metrics
/version`
	})

	logs.WithF(s.fields.WithField("url", url)).Info("Starting api")
	go http.Serve(s.apiListener, m)
	return nil
}

func (s *Synapse) stopApi() {
	if s.apiListener != nil {
		s.apiListener.Close()
	}
	s.apiListener = nil
}

func Logger() macaron.Handler {
	var reqCounter int64
	return func(ctx *macaron.Context, log *log.Logger) {
		start := time.Now()

		fields := data.WithField("method", ctx.Req.Method).
			WithField("uri", ctx.Req.RequestURI).
			WithField("ip", ctx.RemoteAddr()).
			WithField("id", atomic.AddInt64(&reqCounter, 1))
		if logs.IsDebugEnabled() {
			logs.WithF(fields).Trace("Request received")
		}

		rw := ctx.Resp.(macaron.ResponseWriter)
		ctx.Next()

		if logs.IsInfoEnabled() {
			fields = fields.WithField("duration", time.Since(start)).WithField("status", rw.Status())
			var lvl logs.Level
			if rw.Status() >= 500 && rw.Status() < 600 {
				lvl = logs.ERROR
			} else {
				lvl = logs.DEBUG
			}

			logs.LogEntry(&logs.Entry{
				Fields:  fields,
				Level:   lvl,
				Message: "Request completed",
			})

		}
	}
}
